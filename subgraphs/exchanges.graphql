" Tracks this event from the Synthetix.sol contract "
type SynthExchange @entity {
  id: ID!
  account: Exchanger! # address
  fromSynth: Synth
  toSynth: Synth
  fromAmount: BigDecimal! # uint256
  fromAmountInUSD: BigDecimal! # from Amount including fees
  toAmount: BigDecimal! # uint256
  toAmountInUSD: BigDecimal! # to Amount without fees
  feesInUSD: BigDecimal!
  toAddress: Bytes! # address
  timestamp: BigInt!
  gasPrice: BigInt!
}

" Tracks this event from the Synthetix.sol contract. (Atomic exchanges also trigger standard SynthExchange events.)"
type AtomicSynthExchange @entity {
  id: ID!
  account: Exchanger! # address
  fromSynth: Synth
  toSynth: Synth
  fromAmount: BigDecimal! # uint256
  fromAmountInUSD: BigDecimal! # from Amount including fees
  toAmount: BigDecimal! # uint256
  toAmountInUSD: BigDecimal! # to Amount without fees
  feesInUSD: BigDecimal!
  toAddress: Bytes! # address
  timestamp: BigInt!
  gasPrice: BigInt!
}

# Aggrgeations of the synth exchanges by various time/volume groupings
type Total @entity {
  " $timestamp-$period-$bucketMagnitude-$synth "
  id: ID!

  " timestamp of the beginning of the time period this represents "
  timestamp: BigInt!

  " number of seconds the data covers after `timestamp` "
  period: BigInt!

  " minimum power of 10 (in from USD value) the trade must be. ex, 2 means $100 or higher) "
  bucketMagnitude: BigInt!

  " synth to filter by "
  synth: Synth

  " number of trades completed over period "
  trades: BigInt!

  " number of unique traders who were first seen in this period "
  newExchangers: BigInt!

  " number of unique traders seen over period "
  exchangers: BigInt!

  " synth value exchanged in USD units "
  exchangeUSDTally: BigDecimal!

  " synth value received in fees in USD units "
  totalFeesGeneratedInUSD: BigDecimal!
}

" An individual Exchanger aggregated by various time groupings "
type Exchanger @entity {
  " hex address in lowercase (and for non global: hex address in lowercase-$timestamp-$period-$bucketMagnitude-$synth "
  id: ID!

  " timestamp of the beginning of the time period this represents, or 0 for no period filter "
  timestamp: BigInt!

  " number of seconds the data covers after `timestamp`, or 0 for no period filter "
  period: BigInt!

  " minimum power of 10 (in from USD value) the trade must be. ex, 2 means $100 or higher) "
  bucketMagnitude: BigInt!

  " synth to filter by "
  synth: Synth

  " when the user first exchanged "
  firstSeen: BigInt!

  " when the user last exchanged "
  lastSeen: BigInt!

  " nubmer of trades by account "
  trades: BigInt!

  " synth value exchanged in USD units by account "
  exchangeUSDTally: BigDecimal!

  " synth value received in fees in USD units from account "
  totalFeesGeneratedInUSD: BigDecimal!
}

type LatestRate @entity {
  " Name of synth. E.g. sUSD "
  id: ID!

  " Synth USD rate "
  rate: BigDecimal!

  " Address of the aggregator which produces current result "
  aggregator: Bytes!
}

" Latest Rates over time "
type RateUpdate @entity {
  " <transaction hash>-<currency key> "
  id: ID!
  " currencyKey for which this this rate update applies "
  currencyKey: Bytes!
  " currencyKey expressed as a string "
  synth: String!
  " the rate recorded at this timestamp "
  rate: BigDecimal!
  " the block which this rate was recorded "
  block: BigInt!
  " timestamp of the block in which the rate was recorded "
  timestamp: BigInt!
}

type SynthByCurrencyKey @entity {
  " currency key "
  id: ID!
  proxyAddress: Bytes!
}

type Synth @entity {
  " lowercase address of the proxy contract for the synth "
  id: ID!
  name: String!
  symbol: String!

  totalSupply: BigDecimal!
}

type SynthBalance @entity {
  " timestamp + account + synth address "
  id: ID!
  amount: BigDecimal!
  address: Bytes!
  account: String! # using a string here because its ID compatible
  timestamp: BigInt!
  synth: Synth
}

" we dont query this entity but only use it to store aggregate data we need during syncing "
type LatestSynthBalance @entity {
  " account + synth address "
  id: ID!
  amount: BigDecimal!
  address: Bytes!
  account: String!
  timestamp: BigInt!
  synth: Synth
}

type Candle @entity {
  " synth-period-periodId (periodId is timestamp / period) "
  id: ID!
  " Ticker for synth (e.g. 'sUSD') or 'SNX'"
  synth: String!
  open: BigDecimal!
  high: BigDecimal!
  low: BigDecimal!
  close: BigDecimal!
  average: BigDecimal!
  timestamp: BigInt!
  " Duration this candle captures in seconds. Year, quarter, month, week, day, hour, and 15 minutes available. "
  period: BigInt!
  " Number of RateUpdates aggregated into this candle, mostly useful for the indexer to calculate averages "
  aggregatedPrices: BigInt!
}
